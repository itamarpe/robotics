#!/usr/bin/env python
from math import pi
import rospy
import tf
import copy
import moveit_msgs.msg
import moveit_commander
import time
from geometry_msgs.msg import Twist, Quaternion, Pose, Point, PoseStamped



class ArmController(object):

    def __init__(self):
        import sys
        moveit_commander.roscpp_initialize([])
        self.arm = moveit_commander.MoveGroupCommander("arm")
	self.red_object_cords = None

    def receive_red_object_cords(data):
	pass

    def get_red_object_cartesian(data):
	while self.red_object_cords is None:
		time.sleep(0.1)
		

    def move_arm_forward(self):
	points = []
	points.append(self.arm.get_current_pose().pose)
	dest_pose = Pose()
	dest_pose.orientation.w = 1
	dest_pose.position.x = points[0].position.x + 0.2
	dest_pose.position.y = points[0].position.y + 0.2
	dest_pose.position.z = points[0].position.z + 0.2
	points.append(copy.deepcopy(dest_pose))
	(plan, fraction) = self.arm.compute_cartesian_path(points, 0.01, 0)
	self.arm.execute(plan)



if __name__ == '__main__':
    rospy.init_node('moveArm', anonymous=True)
    controller = ArmController()
    robot = moveit_commander.RobotCommander()
    rospy.loginfo("robot group names: {}, state: {}".format(robot.get_group_names(), robot.get_current_state()))

    controller.move_arm()
    #rospy.spin()
